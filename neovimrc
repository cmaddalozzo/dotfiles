" Change that leader.
let mapleader=","
" Change the local leader.
let maplocalleader="\\"

set shell=/bin/bash

if &compatible
  set nocompatible
endif

""
" Functions
""
source ~/Code/dotfiles/functions.vim

""
" Autocommands
""
source ~/Code/dotfiles/autocommands.vim


"######################################
"#  vim-plug init
"######################################

" Specify a directory for plugins
call plug#begin('~/.vim/plugged')

"######################################
"#   Bundles
"######################################
"

"-------------------------
" vimproc
"
" Interactive command execution in Vim.

Plug 'Shougo/vimproc.vim', { 'do': 'make' }

"-------------------------
" Unite
"
" plugin for fuzzy file search, most recent files list
" and much more
Plug 'Shougo/unite.vim'
Plug 'Shougo/neoyank.vim'

" Set unite window height
let g:unite_winheight = 15

" Start unite in insert mode by default
let g:unite_enable_start_insert = 1

" Display unite on the bottom (or bottom right) part of the screen
let g:unite_split_rule = 'botright'

" Set short limit for max most recent files count.
" It less unrelative recent files this way
let g:unite_source_file_mru_limit = 100

" Enable history for yanks
let g:unite_source_history_yank_enable = 1

" Make samll limit for yank history,
let g:unite_source_history_yank_limit = 40

" Grep options Default for unite + supress error messages
let g:unite_source_grep_default_opts = '-iRHns'

let g:unite_source_rec_max_cache_files = 99999

" If ag exists use it instead of grep
if executable('ag')
    " Use ag (the silver searcher)
    " https://github.com/ggreer/the_silver_searcher
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts =
    \ '-i --vimgrep --hidden --ignore ' .
    \ '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
    let g:unite_source_grep_recursive_opt = ''
    " Use ack for fuzzy file search
    let g:unite_source_rec_async_command = ['ag', '--follow', '--nocolor', '--nogroup', '-g', '']
endif

nnoremap [unite] <Nop>
nmap <space> [unite]
nnoremap <silent> [unite]<space> :<C-u>Unite -buffer-name=files file_rec/async<CR>
" nnoremap <silent> [unite]<space> :<C-u>Unite -toggle -buffer-name=mixed file_rec/async buffer file_mru bookmark<cr><c-u>
nnoremap <silent> [unite]f :<C-u>Unite -toggle -auto-resize -buffer-name=files file_rec/async<cr><c-u>
" nnoremap <silent> [unite]y :<C-u>Unite -buffer-name=yanks history/yank<cr>
nnoremap <silent> [unite]y :YRShow<cr>
nnoremap <silent> [unite]l :<C-u>Unite -auto-resize -buffer-name=line line<cr>
nnoremap <silent> [unite]b :<C-u>Unite -auto-resize -buffer-name=buffers buffer<cr>
nnoremap <silent> [unite]/ :<C-u>Unite -buffer-name=search grep:.<cr>
nnoremap <silent> [unite]m :<C-u>Unite -auto-resize -buffer-name=mappings mapping<cr>
nnoremap <silent> [unite]s :<C-u>Unite -quick-match buffer<cr>

" Try to lose reliance on buffergator by remapping to unite buffers
nmap <Leader>b [unite]b

"
" Most recent files source for unite
"
Plug 'Shougo/neomru.vim'

"call unite#define_filter(s:filters)
"unlet s:filters

" /Unite
"-------------------------

"-------------------------
" Tmux plugins
"
" Add proper support for focus events
" Plug 'tmux-plugins/vim-tmux-focus-events'
" Allow seemless navigation between tmux splits
Plug 'christoomey/vim-tmux-navigator'

"-------------------------
" vinegar.vim
"
" Great file system explorer, it appears when you open dir in vim
" Allow modification of dir, and may other things
" Must have
"" Plug 'tpope/vim-vinegar'
" Ctrl-t opens NerdTree
" nnoremap <C-t> :Explore<CR>
" /vinegar.vim
"-------------------------

"-------------------------
" Netrw bindings
"
let g:netrw_liststyle=3         " tree
let g:netrw_banner=0            " no banner
let g:netrw_altv=1              " open files on right
let g:netrw_preview=1           " open previews vertically
nnoremap <C-_> :Sex<CR>
nnoremap <C-\> :Vex<CR>
nnoremap <C-x> :Exp<CR>
let g:netrw_localrmdir='rm -r'

"-------------------------
" Neomake

" /Neomake
"
Plug 'neomake/neomake'
nnoremap <Leader>c :Neomake<CR>

"-------------------------
" Syntastic
"
" Plug 'scrooloose/syntastic'
" let g:syntastic_javascript_checkers = ['eslint']
" 
" let g:syntastic_phpcs_conf=" --standard=Drupal --extensions=php,module,inc,install,test,profile,theme"
" 
" let g:syntastic_html_tidy_ignore_errors = [ 
"       \ '<template> is not recognized!' ,
"       \ 'discarding unexpected <template>' ,
"       \ 'discarding unexpected </template>' ,
"       \ 'inserting implicit <ul>' 
" \]
" 
" let g:syntastic_error_symbol = '✗'
" let g:syntastic_style_error_symbol = '✠'
" let g:syntastic_warning_symbol = '∆'
" let g:syntastic_style_warning_symbol = '≈'
" 
" let g:syntastic_mode_map = { 'mode': 'active',
"                                \ 'active_filetypes': ['php', 'javascript'],
"                                \ 'passive_filetypes': ['less'] }
" 
" " Enable autochecks
" let g:syntastic_check_on_open=1
" let g:syntastic_enable_signs=1
" 
" " For correct works of next/previous error navigation
" let g:syntastic_always_populate_loc_list = 1
" 
" " Show errors with multiple checkers
" let g:syntastic_aggregate_errors = 1
" 
" /Syntastic
"-------------------------
"
"-------------------------
" YouCompleteMe
"
Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
set shortmess+=c

"-------------------------
" Tsuquyomi
"
" Make your Vim a TypeScript IDE.
Plug 'Quramy/tsuquyomi'
let g:tsuquyomi_use_dev_node_module=2
let g:tsuquyomi_tsserver_path='/Users/cmadd/.nvm/versions/node/v6.9.2/bin/tsserver'
let g:tsuquyomi_disable_quickfix = 1
" let g:syntastic_typescript_checkers = ['tslint', 'tsuquyomi']
let g:tsuquyomi_shortest_import_path = 1

"-------------------------
" Tern for Vim
"
" Tern-based JavaScript editing support
Plug 'ternjs/tern_for_vim'
let g:tern_map_keys=1


"-------------------------
"


let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>" 

nmap <Leader>es :UltiSnipsEdit<return>

"-------------------------
" YankRing.vim
"
Plug 'vim-scripts/YankRing.vim'

"-------------------------
" Airline
"
" Nice statusline/ruler for vim
"
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Colorscheme for airline
let g:airline_theme='base16'

" unicode symbols
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_left_sep = '»'
" Set custom left separator
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
" Set custom right separator
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" Use MacVim's tabs
let g:airline#extensions#tabline#enabled = 0

" Don't display encoding
let g:airline_section_y = ''

" Don't display filetype
let g:airline_section_x = ''

" Don't show whitespace warning
" let g:airline_section_warning = 'syntastic'

" /Airline
"-------------------------

"-------------------------
" vim-startify
"
" A fancy start screen for Vim.
"
" Plug 'mhinz/vim-startify'
" Automatically persist sessions.
" let g:startify_session_persistence = 1
"
" /vim-startify
"-------------------------

"
" Improved PHP omnicompletion
"
Plug 'shawncplus/phpcomplete.vim'

"-------------------------
" smartpairs.vim
"
" 
Plug 'gorkunov/smartpairs.vim'

"-------------------------
" Matchit
"
Plug 'tmhedberg/matchit'

"-------------------------
" delimitMate
"
" Allow autoclose paired characters like [,] or (,),
" and add smart cursor positioning inside it,
"
Plug 'Raimondi/delimitMate'

"-------------------------
" surround.vim
"
" Add usefull hotkey for operation with surroundings
" cs{what}{towhat} - inside '' or [] or something like this allow
" change surroundings symbols to another
" and ds{what} - remove them
"
Plug 'tpope/vim-surround'

"-------------------------
" vim-easygrep
"
" Fast and Easy Find and Replace Across Multiple Files
"
" <Leader>vv  - Grep for the word under the cursor, match all occurences,
"               like 'g*'.  See ":help gstar".
" <Leader>vV  - Grep for the word under the cursor, match whole word, like
"               '*'.  See ":help star".
" <Leader>va  - Like vv, but add to existing list.
" <Leader>vA  - Like vV, but add to existing list.
" 
" <Leader>vr  - Perform a global search on the word under the cursor
"               and prompt for a pattern with which to replace it.
" <Leader>vR  - Like vr, but match whole word.
"
Plug 'dkprice/vim-easygrep'

"-------------------------
" vim-gitgutter
"
" A Vim plugin which shows a git diff in the 'gutter' (sign column).
"
Plug 'airblade/vim-gitgutter'

nmap <silent> <leader>gg :GitGutterToggle<cr>

"-------------------------
" vim-fugitive
"
" git wrapper
"
Plug 'tpope/vim-fugitive'
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gb :Gblame<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>gw :Gwrite<CR>
nnoremap <Leader>gc :Gcommit<CR>


"-------------------------
" vim-signature
" smartpairs.vim
"
" Plugin to toggle, display and navigate marks
Plug 'kshenoy/vim-signature'
nmap <Leader>m :SignatureToggle<CR>

"-------------------------
" Scratch.vim
"
" Unobtrusive scratch window
"
" gs in normal mode opens the scratch window
" gs in visual mode pastes the current selection

" Plug 'mtth/scratch.vim'
" let g:scratch_persistence_file=$HOME ."/.vim/scratchfile"

"-------------------------
" PDV - PHP Documentor for VIM - 2
Plug 'tobyS/vmustache'
Plug 'tobyS/pdv'
let g:pdv_template_dir = $HOME ."/.vim/cache/dein/repos/github.com/tobyS/pdv/templates/"
nnoremap <buffer> <Leader>pd :call pdv#DocumentWithSnip()<CR>

"-------------------------
" Twig
" 
Plug 'evidens/vim-twig'

"-------------------------
" vim-javascript v0.10.0
"
" JavaScript bundle for vim, this bundle provides syntax and indent plugins.
" 
Plug 'pangloss/vim-javascript'

"-------------------------
" Typescript
"
Plug 'leafgarland/typescript-vim'

"-------------------------
" Coffeescript (eww)
"
Plug 'kchmck/vim-coffee-script'


"-------------------------
" vim-js-pretty-template
"
" Plug 'Quramy/vim-js-pretty-template'


"-------------------------
" JSON
" 
Plug 'elzr/vim-json'

"-------------------------
" vim-jsx
"
" Syntax highlighting and indenting for JSX.
"
Plug 'mxw/vim-jsx'
let g:jsx_ext_required = 0

"-------------------------
" vim-pug
"
" Syntax highlighting and indenting for PUG.
"
" Plug 'digitaltoad/vim-pug'

"-------------------------
" Colour Schemes
"

"-------------------------
" Solarized
"
"Plug 'altercation/vim-colors-solarized'

"-------------------------
" Gotham
"
Plug 'whatyouhide/vim-gotham'

"-------------------------
" Molokai
"Plug 'tomasr/molokai'

"-------------------------
" Bad Wolf
"
" Plug 'sjl/badwolf'


"-------------------------
" Paper Color (sic)
"
Plug 'NLKNguyen/papercolor-theme'

" /Colour Schemes
"-------------------------


" /Bundles
"
" Initialize plugin system
" Automatically executes filetype plugin indent on and syntax enable
call plug#end()


"######################################
"   Vim settings
"######################################

set background=dark
" set t_Co=256
"colorscheme Gotham
colorscheme papercolor
let g:airline_theme='papercolor'

"colorscheme solarized
" colorscheme molokai
" colorscheme gotham
" colorscheme badwolf

" Auto reload changed files
set autoread

" Indicates fast terminal connection
set ttyfast

" Set character encoding to use in vim
set encoding=utf-8

" Let vim know what encoding we use in our terminal
set termencoding=utf-8

" Which EOl used. For us it's unix
" Not works with modifiable=no
" if &modifiable
"     set fileformat=unix
" endif

" Use 256 colors in vim
" vim-airline not work without it
set t_Co=256

" Enable Tcl interface. Not shure what is exactly mean.
" set infercase

" Interprete all files like binary and disable many features.
" set binary

"--------------------------------------------------
" Display options

" Hide showmode
" Showmode is useless with airline
set noshowmode

" Show file name in window title
set title

" Remove all useless messages like intro screen and use abbreviation like RO
" instead readonly and + instead modified
set shortmess=atI

" Allow scrolling in tmux vim
set mouse=a

" Enable display whitespace characters
set list

" Setting up how to display whitespace characters
set listchars=tab:⇥\ ,trail:·,extends:⋯,precedes:⋯,nbsp:~

" Numbers of rows to keep to the left and to the right off the screen
set scrolloff=10

" Numbers of columns to keep to the left and to the right off the screen
set sidescrolloff=10

" Vim will move to the previous/next line after reaching first/last char in
" the line with this commnad (you can add 'h' or 'l' here as well)
" <,> stand for arrows in command mode and [,] arrows in visual mode
set whichwrap=b,s,<,>,[,],

" Display command which you typing and other command related stuff
set showcmd

" Indicate that last window have a statusline too
set laststatus=2

" Add a line / column display in the bottom right-hand section of the screen.
" Not needed with airline plugin
"set ruler

" Setting up right-hand section(ruller) format
" Not needed with airline plugin
"set rulerformat=%30(%=\:%y%m%r%w\ %l,%c%V\ %P%)

" The cursor should stay where you leave it, instead of moving to the first non
" blank of the line
set nostartofline

" Disable wrapping long string
set nowrap
set formatoptions-=t

" Display Line numbers
set number

" Highlight line with cursor
set cursorline

" maximum text length at N symbols, dictates where colour column shows.
set textwidth=96

" highlight column right after max textwidth
set colorcolumn=+1

" set ballooneval

" Use OS X clipboard
set clipboard=unnamedplus

"--------------------------------------------------
" Tab options

" Copy indent from previous line
set autoindent

" Add additional indents when necessary
set smartindent

" Replace tabs with spaces
set expandtab

" Whe you hit tab at start of line, indent added according to shiftwidth value
set smarttab

" Set tabsize
set tabstop=2
set shiftwidth=2

" Indentation always multiple of shiftwidth
" Applies to  < and > command
set shiftround

"--------------------------------------------------
" Search options

" Add the g flag to search/replace by default
set gdefault

" Highlight search results
set hlsearch

" Ignore case in search patterns
set ignorecase

" Override the 'ignorecase' option if the search pattern contains upper case characters
set smartcase

" Live search. While typing a search command, show matches
set incsearch

" New verticle splits go right
set splitright

" New horizontal splits go below
set splitbelow

" <Leader>n gets rid of highlighting
nnoremap <Leader>n :noh<return><esc>

" Disable higlighting search result on Enter key
nnoremap <silent> <cr> :nohlsearch<cr><cr>

" Show matching brackets
set showmatch

" Make < and > match as well
set matchpairs+=<:>

" Don't highlight line with cursor
set nocursorline

"--------------------------------------------------
" Wildmenu

" Extended autocmpletion for commands
set wildmenu

" Autocmpletion hotkey
set wildcharm=<TAB>

"--------------------------------------------------
" Folding

" Enable syntax folding in javascript
let javaScript_fold=1

" Folds open by default 
set foldlevelstart=99
set nofoldenable

"--------------------------------------------------
" Edit

" Allow backspace to remove indents, newlines and old text
set backspace=indent,eol,start

" toggle paste mode on \p
set pastetoggle=<leader>p

" Add '-' as recognized word symbol. e.g dw delete all 'foo-bar' instead just 'foo'
set iskeyword+=-

" Disable backups file
set nobackup

" Disable vim common sequense for saving.
" By defalut vim write buffer to a new file, then delete original file
" then rename the new file.
set nowritebackup

" Disable swp files
set noswapfile

" Do not add eol at the end of file.
set noeol

" Visual bell
set vb

"Nice typeface
set guifont=Source\ Code\ Pro:h11

" Allow switching buffers without saving.
set hidden

" Grep options
set grepprg=ag

let g:grep_cmd_opts = '--line-numbers --noheading'

"--------------------------------------------------
" Diff Options

" Display filler
set diffopt=filler

" Open diff in horizontal buffer
set diffopt+=horizontal

" Ignore changes in whitespaces characters
set diffopt+=iwhite

" Navigate between splits with Control+<Direction>
" nnoremap <C-J> <C-W><C-J>
" nnoremap <C-K> <C-W><C-K>
" nnoremap <C-L> <C-W><C-L>
" nnoremap <C-H> <C-W><C-H>

" H goes to beginnning of line
nnoremap H ^
" L goes to end of line
nnoremap L $

" Delete current file with Ctrl-Delete
nnoremap <C-Del> :call delete(expand('%'))<CR>

" map jk in insert mode to escape 
inoremap jk <esc>

"" Q plays back q macro.
nnoremap Q @q

"" Reselect on Option-v
nnoremap √ gv

"" Close buffer.
nnoremap <Leader>d :bd<CR>

"" Easy switching to last used buffer.
nnoremap <Leader>l :e#<CR>

"" Easy open this.
nnoremap <Leader>vrc :tabe ~/.vimrc<CR>

" w!! sudo opens file and saves it
cmap w!! w !sudo tee % >/dev/null

nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>

nnoremap <silent> <Leader>js :silent call Decaffeinate()<CR>



" Visual star
xnoremap * :<C-u>call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch()<CR>?<C-R>=@/<CR><CR>

function! s:VSetSearch()
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
  let @s = temp
endfunction

inoremap \fn <C-R>=substitute(expand("%:p"), getcwd(), '', '')<CR>

"hi ColorColumn guibg=grey7
hi MatchParen      guifg=#000000 guibg=#FD971F gui=bold

"" Somebody is turning on gdefault. We don't want that.
set nogdefault
